package infogui;
/**
 * Zaccheus Everett
 * Instruction Screen
 * Gives the user direction on how to use the program
 * 3/22/18 
 * last edited 3/26/18
 */
import java.util.prefs.Preferences;

public class InstScreen extends javax.swing.JFrame {
       
    Preferences root = Preferences.userRoot();// allows the program to save previous actions
    private boolean onStart=true;//variable determines if the screen opens when the program starts
    
    /**
     * Creates new form InstScreen
     * checks if the screen should open on start
     * determines the state of the checkbox on the screen
     */
    public InstScreen() {
        onStart=root.getBoolean("openInst", onStart);
        initComponents();
        instCheckBox.setSelected(onStart);
    }
    private void set(){//sets the value of onstart acccording to the saved  preference
        onStart=!onStart;
        root.putBoolean("openInst", onStart);
    }
    public boolean getpref(){//getter for the saved preference
        boolean pref=root.getBoolean("openInst", onStart);
        return pref;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instCheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        instCheckBox.setText("Open On Start");
        instCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instCheckBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Instructions");

        jTextPane1.setEditable(false);
        jTextPane1.setText("Note! The tags that must be used with this reader are mifare classic 1k and possibly mifare classic 4k. These tags allow 750 bytes of data which is enough space for all of the required data. NTAG_203 can't be used as it is limited to 168 byes of data which is not enough for the required data.\n\nNote! If placing tags on metal they must be anti-metal tags that contain a ferrite sheet between the tag and the metal.\n\nInstructions-\n1. Connect the reader to the computer and make sure the drivers are installed. (The program won't work without them)\n\n2. Set the reader password. Passwords must contain six integers seperated by (.) and the integers must be between 0 and 255. Range: (0.0.0.0.0.0.) to (255.255.255.255.255.255).\nThe default tag password is 255.255.255.255.255.255.\n\n3. The reader should then be able to read and write to a new (default) tag if the tags password is still default. (255.255.255.255.255.255)\n\n4. If the tags password is not default then the reader should be set to the same password as the tag otherwise the program will return authenmtication errors when trying to read,write,clear, and set tag password.\n\n5. Once the tag password and the reader passwords match you can then read,write,clear, and set tag password.\n\n6. When writing to the tag all of the boxes are limited to 20 characters and the notes box is limited to 350 characters.\n\n7. To write to excel click the Menu tab and open the data menu. The data currently on the main screen will be transfered to the data screen where you can then edit the data. \n\n8. You can then select the .xls file you want to write to then then select write to excel to write the data.\n\nPlease email any bugs to jacobrudy@comcast.net\n\n\n");
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 268, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addGap(257, 257, 257)
                        .addComponent(instCheckBox))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instCheckBox)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void instCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instCheckBoxActionPerformed
        set();
    }//GEN-LAST:event_instCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox instCheckBox;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
